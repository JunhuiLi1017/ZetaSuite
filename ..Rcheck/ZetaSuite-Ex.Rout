
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ZetaSuite"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ZetaSuite')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("EventCoverage")
> ### * EventCoverage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: EventCoverage
> ### Title: Generate event coverage analysis and visualization for
> ###   alternative splicing data.
> ### Aliases: EventCoverage
> ### Keywords: ZetaSuite alternative coverage event splicing
> 
> ### ** Examples
> 
> data(countMat)
> data(negGene)
> data(posGene)
> ZscoreVal <- Zscore(countMat, negGene)
> ECList <- EventCoverage(ZscoreVal, negGene, posGene, binNum=100, combine=TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("FDRcutoff")
> ### * FDRcutoff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: FDRcutoff
> ### Title: Determine optimal cutoff thresholds based on Screen Strength
> ###   analysis.
> ### Aliases: FDRcutoff
> ### Keywords: FDR ZetaSuite cutoff screen strength
> 
> ### ** Examples
> 
> data(nonExpGene)
> data(negGene)
> data(posGene)
> data(ZseqList)
> data(countMat)
> ZscoreVal <- Zscore(countMat, negGene)
> zetaData <- Zeta(ZscoreVal, ZseqList, SVM=FALSE)
> cutoffval <- FDRcutoff(zetaData, negGene, posGene, nonExpGene, combine=TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("QC")
> ### * QC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: QC
> ### Title: Perform quality control analysis for high-throughput screening
> ###   data.
> ### Aliases: QC
> ### Keywords: SSMD ZetaSuite control quality t-SNE
> 
> ### ** Examples
> 
> data(countMat)
> data(negGene)
> data(posGene)
> 
> 
> 
> 
> cleanEx()
> nameEx("SVM")
> ### * SVM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SVM
> ### Title: Generate SVM decision boundaries for positive and negative
> ###   control separation.
> ### Aliases: SVM
> ### Keywords: SVM ZetaSuite boundary decision machine support vector
> 
> ### ** Examples
> 
> data(countMat)
> data(negGene)
> data(posGene)
> ZscoreVal <- Zscore(countMat, negGene)
> ECdataList <- EventCoverage(ZscoreVal, negGene, posGene, binNum=10, combine=TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("SVMcurve")
> ### * SVMcurve
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SVMcurve
> ### Title: The SVM curve lines in Zeta-plot.
> ### Aliases: SVMcurve
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(SVMcurve)
> 
> 
> 
> cleanEx()
> nameEx("Zeta")
> ### * Zeta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Zeta
> ### Title: Calculation of zeta and weighted zeta score.
> ### Aliases: Zeta
> ### Keywords: ZetaSuite alternative score splicing zeta
> 
> ### ** Examples
> 
> data(ZseqList)
> data(SVMcurve)
> data(countMat)
> data(negGene)
> ZscoreVal <- Zscore(countMat, negGene)
> zetaData <- Zeta(ZscoreVal, ZseqList, SVM=FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("ZetaSuitSC")
> ### * ZetaSuitSC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ZetaSuitSC
> ### Title: Calculate zeta score for single cell RNA-seq quality control.
> ### Aliases: ZetaSuitSC
> ### Keywords: ZetaSuite cell control quality single
> 
> ### ** Examples
> 
> data(countMatSC)
> 
> 
> 
> 
> cleanEx()
> nameEx("Zscore")
> ### * Zscore
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Zscore
> ### Title: Z-score normalization for high-throughput screening data.
> ### Aliases: Zscore
> ### Keywords: Z-score ZetaSuite normalization
> 
> ### ** Examples
> 
> data(countMat)
> data(negGene)
> ZscoreVal <- Zscore(countMat, negGene)
> ZscoreVal[1:5, 1:5]
          X5621.1     X157.1     X2451.1    X6798.1     X2570.1
HLA-DOB -2.498000  1.8430201  0.20901748  0.7276768  1.80779786
DOK2     1.665303 -2.3679279  0.45552333  2.6441584  1.49359264
POU3F1   0.126659 -1.1401584  0.09130339 -0.8482665 -0.32759624
VWC2     1.170266  0.3294906 -0.74381915 -0.7616473  1.52798191
FGFBP3   2.042632 -1.7006933 -1.53998400 -0.7430438  0.06798774
> 
> 
> 
> 
> cleanEx()
> nameEx("ZseqList")
> ### * ZseqList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ZseqList
> ### Title: The bin size for Zeta calculation.
> ### Aliases: ZseqList
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(ZseqList)
> 
> 
> 
> cleanEx()
> nameEx("countMat")
> ### * countMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: countMat
> ### Title: Subsampled data from in-house HTS2 screening for global splicing
> ###   regulators.
> ### Aliases: countMat
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(countMat)
> 
> 
> 
> cleanEx()
> nameEx("countMatSC")
> ### * countMatSC
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: countMatSC
> ### Title: The cell x gene matrix from single-cell RNA-seq.
> ### Aliases: countMatSC
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(countMatSC)
> 
> 
> 
> cleanEx()
> nameEx("negGene")
> ### * negGene
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: negGene
> ### Title: Input negative file.
> ### Aliases: negGene
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(negGene)
> 
> 
> 
> cleanEx()
> nameEx("nonExpGene")
> ### * nonExpGene
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nonExpGene
> ### Title: Input internal negative control file.
> ### Aliases: nonExpGene
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(nonExpGene)
> 
> 
> 
> cleanEx()
> nameEx("posGene")
> ### * posGene
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: posGene
> ### Title: Input positive file.
> ### Aliases: posGene
> ### Keywords: datasets
> 
> ### ** Examples
> 
>   data(posGene)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.66 0.467 5.376 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
